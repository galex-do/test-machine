version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${DATABASE_USER:-postgres}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-postgres}
      POSTGRES_DB: ${DATABASE_DB:-test}
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
      - ./init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-postgres} -d ${DATABASE_DB:-test}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Database Migration Service using Goose
  migrate:
    build:
      context: .
      dockerfile: Dockerfile.migrate
    environment:
      DATABASE_URL: postgres://${DATABASE_USER:-postgres}:${DATABASE_PASSWORD:-postgres}@${DATABASE_HOST:-postgres}:5432/${DATABASE_DB:-test}?sslmode=disable
    command: ["sh", "-c", "goose postgres \"$$DATABASE_URL\" up"]
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"
    profiles:
      - migration

  # Test Management Application
  app:
    build: .
    ports:
      - "5000:5000"
    volumes:
      - ./migrations:/app/migrations
    environment:
      DATABASE_URL: postgres://${DATABASE_USER:-postgres}:${DATABASE_PASSWORD:-postgres}@${DATABASE_HOST:-postgres}:5432/${DATABASE_DB:-test}?sslmode=disable
      DATABASE_NAME: ${DATABASE_DB:-test}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    # Wait for postgres to be ready
    command: >
      sh -c "
        while ! nc -z postgres 5432; do
          echo 'Waiting for postgres...'
          sleep 1
        done
        echo 'PostgreSQL is ready!'
        ./main
      "